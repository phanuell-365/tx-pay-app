/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SiteLayoutRouteRouteImport } from './routes/_siteLayout/route'
import { Route as SiteLayoutIndexRouteImport } from './routes/_siteLayout/index'
import { Route as SiteLayoutHomeRouteImport } from './routes/_siteLayout/home'
import { Route as SiteLayoutAboutRouteImport } from './routes/_siteLayout/about'

const SiteLayoutRouteRoute = SiteLayoutRouteRouteImport.update({
  id: '/_siteLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const SiteLayoutIndexRoute = SiteLayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SiteLayoutRouteRoute,
} as any)
const SiteLayoutHomeRoute = SiteLayoutHomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => SiteLayoutRouteRoute,
} as any)
const SiteLayoutAboutRoute = SiteLayoutAboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => SiteLayoutRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/about': typeof SiteLayoutAboutRoute
  '/home': typeof SiteLayoutHomeRoute
  '/': typeof SiteLayoutIndexRoute
}
export interface FileRoutesByTo {
  '/about': typeof SiteLayoutAboutRoute
  '/home': typeof SiteLayoutHomeRoute
  '/': typeof SiteLayoutIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_siteLayout': typeof SiteLayoutRouteRouteWithChildren
  '/_siteLayout/about': typeof SiteLayoutAboutRoute
  '/_siteLayout/home': typeof SiteLayoutHomeRoute
  '/_siteLayout/': typeof SiteLayoutIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/about' | '/home' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/about' | '/home' | '/'
  id:
    | '__root__'
    | '/_siteLayout'
    | '/_siteLayout/about'
    | '/_siteLayout/home'
    | '/_siteLayout/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  SiteLayoutRouteRoute: typeof SiteLayoutRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_siteLayout': {
      id: '/_siteLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof SiteLayoutRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_siteLayout/': {
      id: '/_siteLayout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof SiteLayoutIndexRouteImport
      parentRoute: typeof SiteLayoutRouteRoute
    }
    '/_siteLayout/home': {
      id: '/_siteLayout/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof SiteLayoutHomeRouteImport
      parentRoute: typeof SiteLayoutRouteRoute
    }
    '/_siteLayout/about': {
      id: '/_siteLayout/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof SiteLayoutAboutRouteImport
      parentRoute: typeof SiteLayoutRouteRoute
    }
  }
}

interface SiteLayoutRouteRouteChildren {
  SiteLayoutAboutRoute: typeof SiteLayoutAboutRoute
  SiteLayoutHomeRoute: typeof SiteLayoutHomeRoute
  SiteLayoutIndexRoute: typeof SiteLayoutIndexRoute
}

const SiteLayoutRouteRouteChildren: SiteLayoutRouteRouteChildren = {
  SiteLayoutAboutRoute: SiteLayoutAboutRoute,
  SiteLayoutHomeRoute: SiteLayoutHomeRoute,
  SiteLayoutIndexRoute: SiteLayoutIndexRoute,
}

const SiteLayoutRouteRouteWithChildren = SiteLayoutRouteRoute._addFileChildren(
  SiteLayoutRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  SiteLayoutRouteRoute: SiteLayoutRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
